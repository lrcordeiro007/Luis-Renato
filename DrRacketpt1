//aprendendo na aula de LPP as funçoes de outras linguagens menos utilizadas, uma delas o DrRacket

aprendemos as funçoes de somar, subtrair, dividir e multiplicar
-> soma (+ x y)
-> subtraçao (- x y)
-> multiplicaçao (* x y)
-> divisao (/ x y)
tambem temos as funçoes remaider que funciona com a % em C e quociente que retorna o valor da divisao inteira

obs : podendo fazer com mais de duas variaveis, mas cuidado com a ordem ja que ela pode variar no resultado


//aprendemos tambem a funcao define, que nos ajuda a estabelecer valores e atalhos para facilitar na hora de programar

(define <o simbolo ou atalho de sua escolha> <a funçao que vc escolheu utilizar>)

//para ajudar a definir valores de forma mais local afim de facilitar podemos utilizar o let que funciona de maneira parecida
(let (<simbolo> <funcao>) (<simbolo> <funçao>)
 obs : podendo facilitar em mais de uma funçao ao mesmo tempo


 //temos tambem funçoes de printar, pular linha, nova linha e leitura

 -> printar: display (que retorna apenas caracteres e nao pode ser alocada um valor) e printf (que ja consegue printar valores de variaveis)
 -> pular linha: (newline)
 -> leitura: (read)

Como forma de exercicio foi dado o objetivo de fazer um calculo das raizes de bhaskara

resultado esse :

#lang racket


(define a (read))
(newline)

(define b (read))
(newline)

(define c(read))
(newline)

(define Delta (-( b b ) (* 4 a c)))
(define R+ (/(- (sqrt Delta) b) (* 2 a)))
(define R- (/(- 0 (sqrt Delta) b) (* 2 a))

(printf "O valor das suas raizes são: ~v, ~v\n" R+, R-)












